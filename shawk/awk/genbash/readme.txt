genbash generates bash boilerplate code for scripts described by their arguments

Writing the same argument parsing and error reporting code for each of your bash
scripts over and over gets old real quick. genbash.awk does this for you. It
also allows you to define a scripts by what its inputs are. The generated code
parses short and long options. An option may, or may not, take an argument.
Either the short, or the long name of an option can be omitted. The actual
parsing is done with a simple case statement, so no bunching together of short
option names, unfortunately (e.g. 'foo -xyz')

gen_rules.txt    - holds the rules for scriptscript.awk
scriptscript.awk - generates genbash.awk; all but the user defined code in the
user_events part
example_gen.txt  - holds the definition of an example bash script
genbash.awk      - generates bash code

tests/       - testing is done here
bashtest.sh  - bash test library
generated.sh - the script generated by genbash.awk with a few lines added for
output
run-tests.sh - runs the tests which confirm the base functionality of whatever
genbash.awk generates work

Use  : 'awk -f genbash.awk example_gen.txt'
Test : 'bash tests/run-tests.sh'
Watch: 'bash tests/run-tests.sh x'

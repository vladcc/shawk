function print_api_doc() {
print "<awkson_json_api>"
print "Library: awkson json api"
print "Description: awkson user api"
print "Version: 1.0"
print ""
print "Description: Represents the JSON root object."
print "Returns: The string \"r\" used to address the top level JSON object."
print "function JSON_ROOT()"
print ""
print "Description: JL_*() represent the JSON types."
print "Returns: String constants representing each type of object, e.g. \"array\""
print "function JT_OBJECT()"
print ""
print "function JT_ARRAY()"
print ""
print "function JT_STRING()"
print ""
print "function JT_BOOL()"
print ""
print "function JT_NUMBER()"
print ""
print "function JT_NULL()"
print ""
print "Description: JV_*() represent special values for objects which do not have a"
print "a scalar representation. E.g. an object will have the value \"\\{\", an array"
print "the value \"\\[\", and null \"\\0\". These will be returned from json_get_val()."
print "None of them is a valid JSON string. They, in effect, encode the type of the"
print "object and can be used when serializing JSON to dot notation."
print "Returns: String constants of placeholder values for non-single value objects."
print "function JV_OBJECT()"
print ""
print "function JV_ARRAY()"
print ""
print "function JV_NULL()"
print ""
print "Description: Provides the current json file name."
print "Returns: The current json file name."
print "function get_file_name()"
print ""
print "Description: Indicates whether the object specified by 'path' exists in the"
print "current JSON object. 'path' is a dot notation string."
print "Returns: 1 if 'path' exists, 0 otherwise."
print "function json_has(path)"
print ""
print "Description: Retrieves all paths from the parsed JSON in dot notation."
print "Returns: The length of arr_out."
print "function json_get_paths(arr_out)"
print ""
print "Description: Creates single line dot notation in the format \"a.b.c = val\" for"
print "'path' and all reachable paths from 'path' within the JSON object. 'path' is"
print "a dot notation string."
print "Returns: A complete dot representation of 'path', \"\" if 'path' does not"
print "exist."
print "function json_to_dot(path)"
print ""
print "Description: Prints the complete dot representation of 'path'. 'path' is a"
print "dot notation string."
print "Returns: Nothing."
print "function json_print_dot(path)"
print ""
print "Description: Provides the text JSON representation of the object pointed to"
print "by 'path'. 'path' is a dot notation string."
print "Returns: A string representing the object specified by 'path'."
print "function json_to_str(path)"
print ""
print "Description: Prints the objects pointed to by 'path'. 'path' is a dot"
print "notation string."
print "Returns: Nothing."
print "function json_print(path)"
print ""
print "Description: Provides the type of the object specified by 'path', which is"
print "is one of the JT_*() constants. 'path' is a dot notation string."
print "Returns: The type of 'path'."
print "function json_get_type(path)"
print ""
print "Description: Provides the value of the object specified by 'path', which is"
print "the value itself for scalar types, and one of the JV_*() constants for"
print "compound types and for null. Note that if the value is a string, it appears"
print "without any surrounding quotes. json_get_val() provides better performance"
print "than json_to_str(), but it is also more rudimentary in that that it does not"
print "recurse on compound types."
print "Returns: The value of 'path'."
print "function json_get_val(path)"
print ""
print "Description: Sets the value of the object specified by 'path' to 'val' if the"
print "objects exists. A type/value check is performed for arrays, objects, bools,"
print "and null. If the type of 'path' is numeric, 'val' is interpreted as a number,"
print "i.e. 'val = (val+0)'. If the type of 'path' is none of the above, then it has"
print "to be of type string and 'val' is treated as a string literal. 'path' is a"
print "dot notation string."
print "Returns: Nothing."
print "function json_set_val(path, val)"
print ""
print "Description: Sets the type of 'path' to 'type' and assigns 'val' as its"
print "value. If 'val' is not given, a default value is assigned like so:"
print "numbers get 0, strings get the empty string, bools get false, null gets null,"
print "all other get JV_*(). If 'val' is given, the same type/value check is"
print "performed as in json_set_val(). 'path' is a dot notation string."
print "Returns: Nothing."
print "function json_set_type(path, type, val)"
print ""
print "Description: Appends an object specified by 'path' of type 'type' to the"
print "parsed JSON if 'path' does not exist. The type/value rules are the same as in"
print "json_set_type(). 'path' is a dot notation string."
print "Returns: Nothing."
print "function json_add(path, type, val)"
print ""
print "Description: Removes the object pointed to by 'path' from the parsed JSON."
print "'path' is a dot notation string."
print "Returns: Nothing."
print "function json_rm(path)"
print ""
print "Description: Gets all immediate children of 'path'. 'path' is a dot notation"
print "string."
print "Returns: The returned value is the number of children. Their names are in"
print "'arr_out' starting from 1 if any children are found. If 'path' does not"
print "exist, 'arr_out' is unchanged."
print "function json_get_children(arr_out, path)"
print ""
print "</awkson_json_api>"
print "<awklib_prog>"
print "Library: prog"
print "Description: Provides program name, error, and exit handling. Unlike"
print "other libraries, the function names for this library are not"
print "prepended."
print "Version 1.0"
print ""
print "Description: Sets the program name to 'str'. This name can later be"
print "retrieved by get_program_name()."
print "Returns: Nothing."
print "function set_program_name(str)"
print ""
print "Description: Provides the program name."
print "Returns: The name as set by set_program_name()."
print "function get_program_name()"
print ""
print "Description: Prints 'msg' to stderr."
print "Returns: Nothing."
print "function pstderr(msg)"
print ""
print "Description: Sets a static flag which can later be checked by"
print "should_skip_end()."
print "Returns: Nothing."
print "function skip_end_set()"
print ""
print "Description: Clears the flag set by skip_end_set()."
print "Returns: Nothing."
print "function skip_end_clear()"
print ""
print "Description: Checks the static flag set by skip_end_set()."
print "Returns: 1 if the flag is set, 0 otherwise."
print "function should_skip_end()"
print ""
print "Description: Sets a static flag which can later be checked by"
print "did_error_happen()."
print "Returns: Nothing"
print "function error_flag_set()"
print ""
print "Description: Clears the flag set by error_flag_set()."
print "Returns: Nothing"
print "function error_flag_clear()"
print ""
print "Description: Checks the static flag set by error_flag_set()."
print "Returns: 1 if the flag is set, 0 otherwise."
print "function did_error_happen()"
print ""
print "Description: Sets the skip end flag, exits with error code 0."
print "Returns: Nothing."
print "function exit_success()"
print ""
print "Description: Sets the skip end flag, exits with 'code', or 1 if 'code' is 0"
print "or not given."
print "Returns: Nothing."
print "function exit_failure(code)"
print ""
print "Description: Prints '<program-name>: error: msg' to stderr. Sets the"
print "error and skip end flags."
print "Returns: Nothing."
print "function error_print(msg)"
print ""
print "Description: Calls error_print() and quits with failure."
print "Returns: Nothing."
print "function error_quit(msg, code)"
print ""
print "</awklib_prog>"
print "<awklib_read>"
print "Library: read"
print "Description: Read lines or a file into an array."
print "Version: 1.0"
print ""
print "Description: Clears 'arr_out', reads 'fname' and saves the content in "
print "'arr_our'. "
print "Returns: The number of lines read, which is also the length of"
print "'arr_out', or less than 0 if an error has occurred."
print "function read_file(fname, arr_out)"
print ""
print "Description: Clears 'arr_out', calls 'getline' and saves the lines"
print "read in 'arr_out'. If 'rx_until' is given, reading stops when a line"
print "matches 'rx_until'. The matched line is not saved. If 'rx_ignore' is"
print "given, only lines which do not match 'rx_ignore' are saved. If"
print "'rx_until' and 'rx_ignore' are the same, only 'rx_until' is"
print "considered."
print "Returns: The length of 'arr_out', or < 0 on error."
print "function read_lines(arr_out, rx_until, rx_ignore)"
print ""
print "</awklib_read>"
print "<awklib_array>"
print "Library: arr"
print "Description: Array functionality."
print "Version: 1.0"
print ""
print "Description: Clears 'arr'."
print "Returns: Nothing."
print "Complexity: O(1)"
print "function arr_init(arr)"
print ""
print "Description: Clears 'arr_dest', puts all keys of 'map' in 'arr_dest'."
print "Returns: Nothing."
print "Complexity: O(n)"
print "function arr_from_map_keys(arr_dest, map)"
print ""
print "Description: Clears 'arr_dest', puts all values of 'map' in"
print "'arr_dest'."
print "Returns: Nothing."
print "Complexity: O(n)"
print "function arr_from_map_vals(arr_dest, map)"
print ""
print "Description: Clears 'arr_dest' and copies the range defined by"
print "'src_begin' and 'src_end' from 'arr_src' to 'arr_dest'. The range is"
print "inclusive. If 'src_begin' is larger than 'src_end', nothing is"
print "copied."
print "Returns: The length of 'arr_dest'."
print "Complexity: O(n)"
print "function arr_range(arr_dest, arr_src, src_begin, src_end)"
print ""
print "Description: Clears 'arr_dest' and copies 'arr_src' into 'arr_dest'."
print "Returns: The length of 'arr_dest'."
print "Complexity: O(n)"
print "function arr_copy(arr_dest, arr_src, src_len)"
print ""
print "Description: Appends 'arr_src' to the end of 'arr_dest'."
print "Returns: The length of 'arr_dest' after appending."
print "Complexity: O(n)"
print "function arr_append(arr_dest, dest_len, arr_src, src_len)"
print ""
print "Description: Clears 'arr_dest', places all elements from 'arr_src'"
print "which are at indexes contained in 'arr_ind' in 'arr_dest'. E.g. given"
print "'arr_ind[1] = 5; arr_ind[2] = 6', 'arr_dest' will get"
print "'arr_dest[1] = arr_src[5]; arr_dest[2] = arr_src[6]'"
print "Returns: The length of 'arr_dest'."
print "Complexity: O(n)"
print "function arr_gather(arr_dest, arr_src, arr_ind, ind_len)"
print ""
print "Description: Finds the index of the first match for 'regex' in 'arr'."
print "Returns: The index of the first match, 0 if not match is found."
print "Complexity: O(n)"
print "function arr_match_ind_first(arr, len, regex)"
print ""
print "Description: Clears 'arr_dest', places the indexes for all matches"
print "for 'regex' in 'arr_src' in 'arr_dest'."
print "Returns: The length of 'arr_dest'."
print "Complexity: O(n)"
print "function arr_match_ind_all(arr_dest, arr_src, src_len, regex)"
print ""
print "Description: Clears 'arr_dest' and copies all elements which match"
print "'regex' from 'arr_src' to 'arr_dest'."
print "Returns: The length of 'arr_dest'."
print "Complexity: O(n)"
print "function arr_match(arr_dest, arr_src, src_len, regex)"
print ""
print "Description: Finds the index of the first non-match for 'regex' in"
print "'arr'."
print "Returns: The index of the first non-match, 0 if all match."
print "Complexity: O(n)"
print "function arr_dont_match_ind_first(arr, len, regex)"
print ""
print "Description: Clears 'arr_dest', places the indexes for all"
print "non-matches for 'regex' in 'arr_src' in 'arr_dest'."
print "Returns: The length of 'arr_dest'."
print "Complexity: O(n)"
print "function arr_dont_match_ind_all(arr_dest, arr_src, src_len, regex)"
print ""
print "Description: Clears 'arr_dest' and copies all elements which do not"
print "match 'regex' from 'arr_src' to 'arr_dest'."
print "Returns: The length of 'arr_dest'."
print "Complexity: O(n)"
print "function arr_dont_match(arr_dest, arr_src, src_len, regex)"
print ""
print "Description: Calls 'sub()' for every element of 'arr' like"
print "'sub(regex, subst, arr[i])'"
print "Returns: The number of substitutions made."
print "Complexity: O(n)"
print "function arr_sub(arr, len, regex, subst)"
print ""
print "Description: Calls gsub() for every element of 'arr' like"
print "'gsub(regex, subst, arr[i])'"
print "Returns: The number of substitutions made."
print "Complexity: O(n)"
print "function arr_gsub(arr, len, regex, subst)"
print ""
print "Description: Checks if 'arr_a' and 'arr_b' have the same elements."
print "Returns: 1 if the arrays are equal, 0 otherwise."
print "Complexity: O(n)"
print "function arr_is_eq(arr_a, len_a, arr_b, len_b)"
print ""
print "Description: Finds 'val' in 'arr'."
print "Returns: The index of 'val' if it's found, 0 otherwise."
print "Complexity: O(n)"
print "function arr_find(arr, len, val)"
print ""
print "Description: Concatenates all elements of 'arr' into a single string."
print "The elements are separated by 'sep'. It 'sep' is not given, \" \" is"
print "used. 'sep' does not appear after the last element."
print "Returns: The string representation of 'arr'."
print "Complexity: O(n)"
print "function arr_to_str(arr, len, sep)"
print ""
print "Description: Prints 'arr' to stdout."
print "Returns: Nothing."
print "Complexity: O(n)"
print "function arr_print(arr, len, sep)"
print ""
print "</awklib_array>"
print "<awklib_vect>"
print "Library: vect"
print "Description: Vector functionality. A vector is as array which is"
print "aware of its own size."
print "Dependencies: awklib_array.awk"
print "Version: 1.0"
print ""
print "Description: Clears 'vect', initializes it with length 0."
print "Returns: Nothing."
print "Complexity: O(1)"
print "function vect_init(vect)"
print ""
print "Description: Initializes 'vect' to a copy of 'arr'."
print "Returns: Nothing."
print "Complexity: O(n)"
print "function vect_init_arr(vect, arr, len)"
print ""
print "Description: Appends 'val' to 'vect'."
print "Returns: Nothing."
print "Complexity: O(1)"
print "function vect_push(vect, val)"
print ""
print "Description: Appends 'arr' to 'vect'."
print "Returns: Nothing."
print "Complexity: O(n)"
print "function vect_push_arr(vect, arr, len)"
print ""
print "Description: Retrieves the last value from 'vect'."
print "Returns: The last element."
print "Complexity: O(1)"
print "function vect_peek(vect)"
print ""
print "Description: Removes the last element of 'vect'."
print "Returns: Nothing."
print "Complexity: O(1)"
print "function vect_pop(vect)"
print ""
print "Description: Provides the length."
print "Returns: The length of 'vect'."
print "Complexity: O(1)"
print "function vect_len(vect)"
print ""
print "Description: Indicates if 'vect' is empty or not."
print "Returns: 1 if 'vect' is empty, 0 otherwise."
print "Complexity: O(1)"
print "function vect_is_empty(vect)"
print ""
print "Description: Removes the element in 'vect' at index 'ind' by moving"
print "all further elements one to the left."
print "Returns: Nothing."
print "Complexity: O(n)"
print "function vect_del_ind(vect, ind)"
print ""
print "Description: Removes 'val' from 'vect' by  if (arr_find())"
print "vect_del_ind()."
print "Returns: Nothing."
print "Complexity: O(n)"
print "function vect_del_val(vect, val)"
print ""
print "Description: Removes the element at 'ind' from 'vect' by replacing it"
print "with the last element."
print "Returns: Nothing"
print "Complexity: O(1)"
print "function vect_swap_pop_ind(vect, ind)"
print ""
print "Description: Removes the first instance of 'val' from 'vect' by"
print "if (arr_find()) vect_swap_pop_ind()."
print "Returns: Nothing."
print "Complexity: O(1)"
print "function vect_swap_pop_val(vect, val, _ind)"
print ""
print "</awklib_vect>"
print "<awklib_map>"
print "Library: map"
print "Description: Encapsulates map operations."
print "Version: 2.1"
print ""
print "Description: Clears 'map'."
print "Returns: Nothing."
print "Complexity: O(1)"
print "function map_init(map)"
print ""
print "Description: Does \"map[key] = val\". Overwrites existing values."
print "Returns: Nothing."
print "Complexity: O(1)"
print "function map_set(map, key, val)"
print ""
print "Description: Sets the values for all keys in 'map' to 'val'."
print "Returns: Nothing."
print "Complexity: O(n)"
print "function map_set_vals_to(map, val)"
print ""
print "Description: Does \"delete map[key]\" if 'key' exists in 'map'."
print "Returns: Nothing."
print "Complexity: O(1)"
print "function map_del(map, key)"
print ""
print "Description: Retrieves the value at index 'key' from 'map'."
print "Returns: map[key] if 'key' exists in main, the empty string"
print "otherwise. Use map_has_key() first."
print "Complexity: O(1)"
print "function map_get(map, key)"
print ""
print "Description: Retrieves the key for 'val' from 'map'."
print "Returns: The string representing the key for 'val' in 'map', the"
print "empty string if 'val' is not found in 'map'. Use map_has_val() first."
print "Complexity: O(n)"
print "function map_get_key(map, val)"
print ""
print "Description: Indicates if 'key' exists in 'map'."
print "Returns: 1 if 'key' exists in 'map', 0 otherwise."
print "Complexity: O(1)"
print "function map_has_key(map, key)"
print ""
print "Description: Indicates whether 'val' exists in map."
print "Returns: 1 if 'val' is a value in 'map', 0 otherwise."
print "Complexity: O(n)"
print "function map_has_val(map, val)"
print ""
print "Description: Indicates if 'map' has any members."
print "Returns: 1 if 'map' is empty, 0 otherwise."
print "Complexity: O(1)"
print "function map_is_empty(map)"
print ""
print "Description: Counts the elements in 'map'."
print "Returns: The number of elements in 'map'."
print "Complexity: O(n)"
print "function map_size(map)"
print ""
print "Description: Clears 'map_dest', copies 'map_src' into 'map_dest'."
print "Returns: The number of elements copied."
print "Complexity: O(n)"
print "function map_copy(map_dest, map_src)"
print ""
print "Description: Checks whether or not 'map_a' and 'map_b' have the same"
print "elements."
print "Returns: 1 if 'map_a' is equal to 'map_b', 0 otherwise."
print "Complexity: O(n)"
print "function map_is_eq(map_a, map_b)"
print ""
print "Description: Inserts all elements from 'map_src' which do not exist"
print "in 'map_dest' (which are \"new\" to 'map_dest') into 'map_dest'."
print "Returns: The number of elements inserted."
print "Complexity: O(n)"
print "function map_overlay_new(map_dest, map_src)"
print ""
print "Description: Inserts all elements from 'map_src' into 'map_dest'."
print "Existing elements in 'map_dest' are overwritten."
print "Returns: The number of elements inserted."
print "Complexity: O(n)"
print "function map_overlay_all(map_dest, map_src)"
print ""
print "Description: Clears 'map_dest', fills 'map_dest' with all elements"
print "from 'map_src' whose keys match 'regex'."
print "Returns: The number of matches."
print "Complexity: O(n)"
print "function map_match_key(map_dest, map_src, regex)"
print ""
print "Description: Clears 'map_dest', fills 'map_dest' with all elements"
print "from 'map_src' whose keys do not match 'regex'."
print "Returns: The number of non-matches."
print "Complexity: O(n)"
print "function map_dont_match_key(map_dest, map_src, regex)"
print ""
print "Description: Clears 'map_dest', fills 'map_dest' with all elements"
print "from 'map_src' whose values match 'regex'."
print "Returns: The number of matches."
print "Complexity: O(n)"
print "function map_match_val(map_dest, map_src, regex)"
print ""
print "Description: Clears 'map_dest', fills 'map_dest' with all elements"
print "from 'map_src' whose values do not match 'regex'."
print "Returns: The number of non-matches."
print "Complexity: O(n)"
print "function map_dont_match_val(map_dest, map_src, regex)"
print ""
print "Description: Clears 'map_dest', all values in 'map_src' become keys"
print "in 'map_dest', all keys in 'map_src' become values in 'map_dest'."
print "If a value in 'map_src' repeats, its key does not overwrite the value"
print "in 'map_dest'. E.g."
print "map_src[\"foo\"] = \"bar\""
print "map_src[\"baz\"] = \"bar\""
print "will result in"
print "map_dest[\"bar\"] = \"foo\" "
print "Returns: The number of elements inserted."
print "Complexity: O(n)"
print "function map_reverse_once(map_dest, map_src)"
print ""
print "Description: Clears 'map_dest', all values in 'map_src' become keys"
print "in 'map_dest', all keys in 'map_src' become values in 'map_dest'."
print "If a value in 'map_src' repeats, its key overwrites the value in"
print "'map_dest'. E.g."
print "map_src[\"foo\"] = \"bar\""
print "map_src[\"baz\"] = \"bar\""
print "will result in"
print "map_dest[\"bar\"] = \"baz\" "
print "Returns: The number of elements inserted."
print "Complexity: O(n)"
print "function map_reverse(map_dest, map_src)"
print ""
print "Description: Provides a multi line string representation of 'map'"
print "specified by 'fmt'. 'fmt' has include two '%s' - first for the key"
print "of the map, the second one for the corresponding value. All"
print "key-value pairs are concatenated together. If 'fmt' is not given,"
print "\"%s %s\\n\" is used."
print "Returns: The string representation of 'map'."
print "Complexity: O(n)"
print "function map_to_str(map, fmt)"
print ""
print "Description: Prints the string representation of 'map' to stdout as"
print "returned by map_to_str(). Does not print a trailing new line."
print "Returns: Nothing."
print "Complexity: O(n)"
print "function map_print(map, fmt)"
print ""
print "</awklib_map>"
}

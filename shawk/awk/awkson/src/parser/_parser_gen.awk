# <definitions>
# translated by rdpg-to-awk.awk 1.1
# generated by rdpg.awk 1.4
# optimized by rdpg-opt.awk 1.2 Olvl=4
function _prs_json(    _arr) {
# rule _prs_json
# defn _prs_value _TOK_EOI
	_tok_next()
	if (_prs_value()) {
		if (_tok_match(_TOK_EOI())) {
			_tok_next()
			return 1
		} else {
			_arr[1] = _TOK_EOI()
			_tok_err_exp(_arr, 1)
		}
	}
	return 0
}
function _prs_value(    _arr) {
# rule _prs_value
# defn _TOK_LCURL _prs_usr_on_obj_start _prs_obj_rest
# defn _TOK_LSQR _prs_usr_on_arr_start _prs_arr_rest
# defn _TOK_STRING
# defn _TOK_NUMBER
# defn _TOK_TRUE
# defn _TOK_FALSE
# defn _TOK_NULL
	if (_tok_match(_TOK_LCURL())) {
		_tok_next()
		if (_prs_usr_on_obj_start()) {
			if (_prs_obj_rest()) {
				_prs_usr_on_obj_end()
				return 1
			}
		}
	} else if (_tok_match(_TOK_LSQR())) {
		_tok_next()
		if (_prs_usr_on_arr_start()) {
			if (_prs_arr_rest()) {
				_prs_usr_on_arr_end()
				return 1
			}
		}
	} else if (_tok_match(_TOK_STRING())) {
		_prs_usr_on_string()
		_tok_next()
		return 1
	} else if (_tok_match(_TOK_NUMBER())) {
		_prs_usr_on_number()
		_tok_next()
		return 1
	} else if (_tok_match(_TOK_TRUE())) {
		_prs_usr_on_bool()
		_tok_next()
		return 1
	} else if (_tok_match(_TOK_FALSE())) {
		_prs_usr_on_bool()
		_tok_next()
		return 1
	} else if (_tok_match(_TOK_NULL())) {
		_prs_usr_on_null()
		_tok_next()
		return 1
	} else {
		_arr[1] = _TOK_LCURL()
		_arr[2] = _TOK_LSQR()
		_arr[3] = _TOK_STRING()
		_arr[4] = _TOK_NUMBER()
		_arr[5] = _TOK_TRUE()
		_arr[6] = _TOK_FALSE()
		_arr[7] = _TOK_NULL()
		_tok_err_exp(_arr, 7)
	}
	return 0
}
function _prs_parse_as_value_on_err_sync(    _arr) {
# rule _prs_parse_as_value_on_err_sync
# defn _prs_value
	return _prs_value()
}
function _prs_obj_rest(    _arr) {
# rule _prs_obj_rest
# defn _TOK_RCURL
# defn _prs_members _TOK_RCURL
	if (_tok_match(_TOK_RCURL())) {
		_tok_next()
		return 1
	} else if (_prs_members()) {
		if (_tok_match(_TOK_RCURL())) {
			_tok_next()
			return 1
		} else {
			_arr[1] = _TOK_RCURL()
			_tok_err_exp(_arr, 1)
		}
	} else {
		_arr[1] = _TOK_RCURL()
		_tok_err_exp(_arr, 1)
	}
	return 0
}
function _prs_arr_rest(    _arr) {
# rule _prs_arr_rest
# defn _TOK_RSQR
# defn _prs_values _TOK_RSQR
	if (_tok_match(_TOK_RSQR())) {
		_tok_next()
		return 1
	} else if (_prs_values()) {
		if (_tok_match(_TOK_RSQR())) {
			_tok_next()
			return 1
		} else {
			_arr[1] = _TOK_RSQR()
			_tok_err_exp(_arr, 1)
		}
	} else {
		_arr[1] = _TOK_RSQR()
		_tok_err_exp(_arr, 1)
	}
	return 0
}
function _prs_members(    _arr) {
# rule _prs_members
# defn _prs_member _prs_members_rest
	if (_prs_member()) {
		return _prs_members_rest()
	}
	return 0
}
function _prs_member(    _arr) {
# rule _prs_member
# defn _prs_member_name _TOK_COLON _prs_value
	if (_prs_member_name()) {
		if (_tok_match(_TOK_COLON())) {
			_tok_next()
			return _prs_value()
		} else {
			_arr[1] = _TOK_COLON()
			_tok_err_exp(_arr, 1)
		}
	}
	return 0
}
function _prs_member_name(    _arr) {
# rule _prs_member_name
# defn _TOK_STRING
	if (_tok_match(_TOK_STRING())) {
		_prs_usr_on_member_name()
		_tok_next()
		return 1
	} else {
		_arr[1] = _TOK_STRING()
		_tok_err_exp(_arr, 1)
	}
	return 0
}
function _prs_members_rest(    _arr) {
# rule _prs_members_rest
# defn _prs_member_next _prs_members_rest
	while (1) {
		if (_prs_member_next()) {
			continue
		}
		return 1
	}
}
function _prs_member_next(    _arr) {
# rule _prs_member_next?
# defn _TOK_COMMA _prs_member
	if (_tok_match(_TOK_COMMA())) {
		_tok_next()
		return _prs_member()
	}
	return 0
}
function _prs_values(    _arr) {
# rule _prs_values
# defn _prs_value _prs_values_rest
	if (_prs_value()) {
		return _prs_values_rest()
	}
	return 0
}
function _prs_values_rest(    _arr) {
# rule _prs_values_rest
# defn _prs_value_next _prs_values_rest
	while (1) {
		if (_prs_value_next()) {
			continue
		}
		return 1
	}
}
function _prs_value_next(    _arr) {
# rule _prs_value_next?
# defn _TOK_COMMA _prs_value
	if (_tok_match(_TOK_COMMA())) {
		_tok_next()
		return _prs_value()
	}
	return 0
}
# </definitions>

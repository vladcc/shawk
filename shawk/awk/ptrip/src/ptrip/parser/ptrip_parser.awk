# <parser_definitions>
# translated by rdpg-to-awk.awk 1.1
# generated by rdpg.awk 1.311
# optimized by rdpg-opt.awk 1.2 Olvl=5
function ptree_fmt(    _arr) {
# rule ptree_fmt
# defn ptree_items TOK_EOI
	ptree_tok_next()
	if (ptree_items()) {
		if (ptree_tok_match(TOK_EOI())) {
			ptree_tok_next()
			return 1
		} else {
			_arr[1] = TOK_EOI()
			ptree_tok_err_exp(_arr, 1)
		}
	}
	return 0
}
function ptree_items() {
# rule ptree_items
# defn ptree_new_line_star ptree_item ptree_items
	while (1) {
		if (ptree_new_line_star()) {
			if (ptree_item()) {
				continue
			} else {
				return 1
			}
		}
		return 0
	}
}
function ptree_item() {
# rule ptree_item?
# defn ptree_tree
# defn ptree_include
	if (ptree_tree()) {
		return 1
	} else {
		if (ptree_tok_match(TOK_INCLUDE())) {
			ptree_tok_next()
			if (ptree_include_fname()) {
				if (ptree_include_end()) {
					_ptree_on_include()
					return 1
				}
			}
		}
		return 0
	}
}
function ptree_tree() {
# rule ptree_tree
# defn ptree_key ptree_rest
	if (ptree_key()) {
		ptree_rest()
		return 1
	}
	return 0
}
function ptree_rest() {
# rule ptree_rest?
# defn ptree_new_line_plus ptree_opt_subtree
# defn ptree_val ptree_new_line_star ptree_opt_subtree
	if (ptree_new_line_plus()) {
		ptree_opt_subtree()
		return 1
	} else if (ptree_val()) {
		if (ptree_new_line_star()) {
			ptree_opt_subtree()
			return 1
		}
	}
	return 0
}
function ptree_include_end() {
# rule ptree_include_end
# defn ptree_new_line_plus
	if (ptree_new_line_plus()) {
		return 1
	} else {
		_ptree_bad_include()
	}
	return 1
}
function ptree_include_fname(    _arr) {
# rule ptree_include_fname
# defn TOK_STRING
	if (ptree_tok_match(TOK_STRING())) {
		_ptree_read_string()
		ptree_tok_next()
		return 1
	} else {
		_arr[1] = TOK_STRING()
		ptree_tok_err_exp(_arr, 1)
	}
	return 0
}
function ptree_key() {
# rule ptree_key
# defn ptree_read_opt
	if (ptree_read_opt()) {
		_ptree_on_key()
		return 1
	}
	return 0
}
function ptree_val() {
# rule ptree_val
# defn ptree_read_opt
	if (ptree_read_opt()) {
		_ptree_on_val()
		return 1
	}
	return 1
}
function ptree_read_opt() {
# rule ptree_read_opt?
# defn TOK_WORD
# defn TOK_STRING
	if (ptree_tok_match(TOK_WORD())) {
		_ptree_read_word()
		ptree_tok_next()
		return 1
	} else if (ptree_tok_match(TOK_STRING())) {
		_ptree_read_string()
		ptree_tok_next()
		return 1
	}
	return 0
}
function ptree_opt_subtree(    _arr) {
# rule ptree_opt_subtree?
# defn ptree_left_curly ptree_items ptree_right_curly
	if (ptree_left_curly()) {
		if (ptree_items()) {
			if (ptree_tok_match(TOK_R_CURLY())) {
				ptree_tok_next()
				if (ptree_new_line_star()) {
					_ptree_lvl_pop()
					return 1
				}
			} else {
				_arr[1] = TOK_R_CURLY()
				ptree_tok_err_exp(_arr, 1)
			}
			return 0
		} else {
			return 0
		}
	}
	return 1
}
function ptree_new_line_plus() {
# rule ptree_new_line_plus?
# defn TOK_NEW_LINE ptree_new_line_star
	if (ptree_tok_match(TOK_NEW_LINE())) {
		ptree_tok_next()
		while (1) {
			if (ptree_eat_new_line()) {
				continue
			}
			return 1
		}
	}
	return 0
}
function ptree_new_line_star() {
# rule ptree_new_line_star
# defn ptree_eat_new_line ptree_new_line_star
	while (1) {
		if (ptree_eat_new_line()) {
			continue
		}
		return 1
	}
}
function ptree_eat_new_line() {
# rule ptree_eat_new_line?
# defn TOK_NEW_LINE
	if (ptree_tok_match(TOK_NEW_LINE())) {
		ptree_tok_next()
		return 1
	}
	return 0
}
function ptree_left_curly() {
# rule ptree_left_curly?
# defn TOK_L_CURLY ptree_new_line_star
	if (ptree_tok_match(TOK_L_CURLY())) {
		ptree_tok_next()
		if (ptree_new_line_star()) {
			_ptree_lvl_push()
			return 1
		}
	}
	return 0
}
# </parser_definitions>

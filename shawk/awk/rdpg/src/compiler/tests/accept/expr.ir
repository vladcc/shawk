# generated by rdpg-comp.awk 2.1.1
#
# Immediate error detection: 1
#
# Grammar:
#
# 1. start : expr_plus EOI
#
# 2. expr : \on_expr_start expr_add_sub_opt SEMI \on_expr_end
#
# 3. expr_plus : expr expr_star
#
# 4. expr_star : expr expr_star
# 5. expr_star : 0
#
# 6. expr_add_sub : expr_mul_div add_sub_star
#
# 7. expr_add_sub_opt : expr_add_sub
# 8. expr_add_sub_opt : 0
#
# 9. add_sub : PLUS expr_mul_div \on_add
# 10. add_sub : MINUS expr_mul_div \on_sub
#
# 11. add_sub_star : add_sub add_sub_star
# 12. add_sub_star : 0
#
# 13. expr_mul_div : expr_expon mul_div_star
#
# 14. mul_div : MUL expr_expon \on_mul
# 15. mul_div : DIV expr_expon \on_div
#
# 16. mul_div_star : mul_div mul_div_star
# 17. mul_div_star : 0
#
# 18. expr_expon : expr_base expon_opt
#
# 19. expon : POW expr_expon \on_pow
#
# 20. expon_opt : expon
# 21. expon_opt : 0
#
# 22. expr_base : MINUS base \on_neg
# 23. expr_base : base
#
# 24. base : NUMBER \on_number
# 25. base : L_PAR expr_add_sub R_PAR
#

tokens EOI SEMI PLUS MINUS MUL DIV POW NUMBER L_PAR R_PAR
tok_eoi EOI
sets
{
	alias set_1 SEMI MINUS NUMBER L_PAR
	alias set_2 MINUS NUMBER L_PAR
	alias set_3 PLUS MINUS
	alias set_4 SEMI R_PAR
	alias set_5 MUL DIV
	alias set_6 PLUS MINUS SEMI R_PAR
	alias set_7 MUL DIV PLUS MINUS SEMI R_PAR
	alias set_8 NUMBER L_PAR
	alias set_9 SEMI MINUS NUMBER L_PAR EOI
	alias set_10 MINUS NUMBER L_PAR SEMI
	alias set_11 POW MUL DIV PLUS MINUS SEMI R_PAR
	alias set_12 EOI
	alias set_13 SEMI
	predict start_1 set_1
	predict expr_1 set_1
	predict expr_plus_1 set_1
	predict expr_star_1 set_1
	predict expr_add_sub_1 set_2
	predict expr_add_sub_opt_1 set_2
	predict add_sub_star_1 set_3
	predict add_sub_star_2 set_4
	predict expr_mul_div_1 set_2
	predict mul_div_star_1 set_5
	predict mul_div_star_2 set_6
	predict expr_expon_1 set_2
	predict expon_opt_2 set_7
	predict expr_base_2 set_8
	expect start set_1
	expect expr set_1
	expect expr_plus set_1
	expect expr_star set_9
	expect expr_add_sub set_2
	expect expr_add_sub_opt set_10
	expect add_sub set_3
	expect add_sub_star set_6
	expect expr_mul_div set_2
	expect mul_div set_5
	expect mul_div_star set_7
	expect expr_expon set_2
	expect expon_opt set_11
	expect expr_base set_2
	expect base set_8
	sync expr set_9
	sync expr_plus set_12
	sync expr_star set_12
	sync expr_add_sub set_4
	sync expr_add_sub_opt set_13
	sync add_sub set_6
	sync add_sub_star set_4
	sync expr_mul_div set_6
	sync mul_div set_7
	sync mul_div_star set_6
	sync expr_expon set_7
	sync expon set_7
	sync expon_opt set_7
	sync expr_base set_11
	sync base set_11
}
func rdpg_parse
{
	return call start && was_no_err
}
func start
{
	# 1. start : expr_plus EOI

	call tok_next
	if call predict start_1
	{
		if call expr_plus
		{
			if call tok_match EOI
			{
				return true
			}
			else
			{
				call expect EOI
			}
		}
	}
	else
	{
		call expect start
	}
	return false
}
func expr
{
	# 2. expr : \on_expr_start expr_add_sub_opt SEMI \on_expr_end

	if call predict expr_1
	{
		call \ on_expr_start
		if call expr_add_sub_opt
		{
			if call tok_is SEMI
			{
				call \ on_expr_end
				call tok_next
				return true
			}
			else
			{
				call expect SEMI
			}
		}
	}
	else
	{
		call expect expr
	}
	return call sync expr
}
func expr_plus
{
	# 3. expr_plus : expr expr_star

	if call predict expr_plus_1
	{
		if call expr
		{
			if call expr_star
			{
				return true
			}
		}
	}
	else
	{
		call expect expr_plus
	}
	return call sync expr_plus
}
func expr_star
{
	# 4. expr_star : expr expr_star
	# 5. expr_star : 0

	loop
	{
		if call predict expr_star_1
		{
			if call expr
			{
				continue
			}
		}
		else_if call tok_is EOI
		{
			return true
		}
		else
		{
			call expect expr_star
		}
		return call sync expr_star
	}
}
func expr_add_sub
{
	# 6. expr_add_sub : expr_mul_div add_sub_star

	if call predict expr_add_sub_1
	{
		if call expr_mul_div
		{
			if call add_sub_star
			{
				return true
			}
		}
	}
	else
	{
		call expect expr_add_sub
	}
	return call sync expr_add_sub
}
func expr_add_sub_opt
{
	# 7. expr_add_sub_opt : expr_add_sub
	# 8. expr_add_sub_opt : 0

	if call predict expr_add_sub_opt_1
	{
		if call expr_add_sub
		{
			return true
		}
	}
	else_if call tok_is SEMI
	{
		return true
	}
	else
	{
		call expect expr_add_sub_opt
	}
	return call sync expr_add_sub_opt
}
func add_sub
{
	# 9. add_sub : PLUS expr_mul_div \on_add
	# 10. add_sub : MINUS expr_mul_div \on_sub

	if call tok_match PLUS
	{
		if call expr_mul_div
		{
			call \ on_add
			return true
		}
	}
	else_if call tok_match MINUS
	{
		if call expr_mul_div
		{
			call \ on_sub
			return true
		}
	}
	else
	{
		call expect add_sub
	}
	return call sync add_sub
}
func add_sub_star
{
	# 11. add_sub_star : add_sub add_sub_star
	# 12. add_sub_star : 0

	loop
	{
		if call predict add_sub_star_1
		{
			if call add_sub
			{
				continue
			}
		}
		else_if call predict add_sub_star_2
		{
			return true
		}
		else
		{
			call expect add_sub_star
		}
		return call sync add_sub_star
	}
}
func expr_mul_div
{
	# 13. expr_mul_div : expr_expon mul_div_star

	if call predict expr_mul_div_1
	{
		if call expr_expon
		{
			if call mul_div_star
			{
				return true
			}
		}
	}
	else
	{
		call expect expr_mul_div
	}
	return call sync expr_mul_div
}
func mul_div
{
	# 14. mul_div : MUL expr_expon \on_mul
	# 15. mul_div : DIV expr_expon \on_div

	if call tok_match MUL
	{
		if call expr_expon
		{
			call \ on_mul
			return true
		}
	}
	else_if call tok_match DIV
	{
		if call expr_expon
		{
			call \ on_div
			return true
		}
	}
	else
	{
		call expect mul_div
	}
	return call sync mul_div
}
func mul_div_star
{
	# 16. mul_div_star : mul_div mul_div_star
	# 17. mul_div_star : 0

	loop
	{
		if call predict mul_div_star_1
		{
			if call mul_div
			{
				continue
			}
		}
		else_if call predict mul_div_star_2
		{
			return true
		}
		else
		{
			call expect mul_div_star
		}
		return call sync mul_div_star
	}
}
func expr_expon
{
	# 18. expr_expon : expr_base expon_opt

	if call predict expr_expon_1
	{
		if call expr_base
		{
			if call expon_opt
			{
				return true
			}
		}
	}
	else
	{
		call expect expr_expon
	}
	return call sync expr_expon
}
func expon
{
	# 19. expon : POW expr_expon \on_pow

	if call tok_match POW
	{
		if call expr_expon
		{
			call \ on_pow
			return true
		}
	}
	else
	{
		call expect POW
	}
	return call sync expon
}
func expon_opt
{
	# 20. expon_opt : expon
	# 21. expon_opt : 0

	if call tok_is POW
	{
		if call expon
		{
			return true
		}
	}
	else_if call predict expon_opt_2
	{
		return true
	}
	else
	{
		call expect expon_opt
	}
	return call sync expon_opt
}
func expr_base
{
	# 22. expr_base : MINUS base \on_neg
	# 23. expr_base : base

	if call tok_match MINUS
	{
		if call base
		{
			call \ on_neg
			return true
		}
	}
	else_if call predict expr_base_2
	{
		if call base
		{
			return true
		}
	}
	else
	{
		call expect expr_base
	}
	return call sync expr_base
}
func base
{
	# 24. base : NUMBER \on_number
	# 25. base : L_PAR expr_add_sub R_PAR

	if call tok_is NUMBER
	{
		call \ on_number
		call tok_next
		return true
	}
	else_if call tok_match L_PAR
	{
		if call expr_add_sub
		{
			if call tok_match R_PAR
			{
				return true
			}
			else
			{
				call expect R_PAR
			}
		}
	}
	else
	{
		call expect base
	}
	return call sync base
}

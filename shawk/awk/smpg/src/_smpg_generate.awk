# <generate>
function generate_all() {
	generate_head()
	nl()
	generate_descr()
	nl()
	generate_other()
	nl()
	generate_templates_and_fsm()
	nl()
	generate_includes()
}
function nl() {out_append_str("")}
function generate_head() {
	out_append_str("#!/usr/bin/awk -f")
	nl()
	out_append_str(sprintf("# generated by %s %s",
		SCRIPT_NAME(), SCRIPT_VERSION()))
}
function generate_descr_incl(    _arr, _len) {
	out_append_str("function DESCRIPT_INCLUDES() {")
	out_append_str("return \\")

	out_append_str("\"included files:\\n\"\\")
	_len = INCLUDE_get_file_names(_arr)
	arr_sub(_arr, _len, "^.*/", "\"")
	arr_sub(_arr, _len, "$", "\\n\"\\")
	out_append_arr(_arr, _len)

	out_append_str("}")
}
function generate_descr_fsm(    _arr, _len) {
	out_append_str("function DESCRIPT_FSM() {")
	out_append_str("return \\")

	out_append_str("\"fsm rules:\\n\"\\")

	_len = FSM_get_FSM_src(_arr)
	arr_sub(_arr, _len, "^", "\"")
	arr_sub(_arr, _len, "$", "\\n\"\\")
	out_append_arr(_arr, _len)
	out_append_str("\"\\n\"\\")
	out_append_str("\"'->' is read as 'must be followed by'\\n\"\\")
	out_append_str("\"'|' is read as 'or'\"")
	out_append_str("}")
}
function generate_descr(    _arr, _len) {
	out_append_str("# <description>")
	generate_descr_incl()
	generate_descr_fsm()
	out_append_str("function DESCRIPT() {")
	out_append_str("\treturn (DESCRIPT_INCLUDES() \"\\n\" DESCRIPT_FSM())")
	out_append_str("}")
	out_append_str("# </description>")
}
function generate_other() {
	out_append_str("# <other>")
	out_append_str(OTHER_get_src())
	out_append_str("# </other>")
}
function generate_templates_and_fsm(    _arr_fsm_src, _arr, _len) {

	_len = FSM_get_FSM_src(_arr_fsm_src)
	_len = fsm_make(_arr, _arr_fsm_src, _len, FSM_get_name(),
		FSM_EVENT())

	if (!_len)
		equit(sprintf("fsm: %s", _arr[2]), FSM_get_line_no(_arr[1]))

	enrich_templates_and_handlers(_arr, _len)
	out_append_arr(_arr, _len)
}
function enrich_templates_and_handlers(arr, len,    _arr_hndl_ind,
_arr_nm, _arr_nm_cpy, _len_nm, _i, _end, _j, _name, _rx, _prep_map,
_args, _hind, _tmplt, _arr_rxs) {


	_end = get_handler_start(_arr_hndl_ind, arr, len)
	_len_nm = get_handler_names(_arr_nm, arr, _arr_hndl_ind, _end)
	arr_copy(_arr_nm_cpy, _arr_nm, _len_nm)

	_end = TEMPLATE_get_rx_all(_arr_rxs)
	if (_end) {
		_tmplt = "# <templated>"

		for (_i = 1; _i <= _end; ++_i) {

			_rx = _arr_rxs[_i]
			_tmplt = (_tmplt "\n" sprintf("# '%s'", _rx))
			for (_j = 1; _j <= _len_nm; ++_j) {

				_name = _arr_nm_cpy[_j]
				if (_name && match(_name, _rx)) {
					_arr_nm_cpy[_j] = ""

					_hind = _arr_hndl_ind[_j]
					_prep_map["&"] = _name
					_tmplt = (_tmplt "\n"\
						prep_str(TEMPLATE_get_rx_src(_rx), _prep_map) \
						"\n")
				}
			}
		}
		_tmplt = (_tmplt "# </templated>\n")
		arr[1] = (_tmplt "\n" arr[1])
	}

	_end = HANDLER_get_rx_all(_arr_rxs)
	if (_end) {
		for (_i = 1; _i <= _end; ++_i) {

			_rx = _arr_rxs[_i]
			_args = HANDLER_get_rx_args(_rx)
			for (_j = 1; _j <= _len_nm; ++_j) {

				_name = _arr_nm[_j]
				if (_name && match(_name, _rx)) {
					_arr_nm[_j] = ""

					_hind = _arr_hndl_ind[_j]
					if (_args) {
						sub("\\)", sprintf("    %s)", _args),
							arr[_hind])
					}

					_prep_map["&"] = _name
					arr[_hind+1] = prep_str(HANDLER_get_rx_src(_rx),
						_prep_map)
				}
			}
		}
	}
}
function get_handler_start(arr_out, arr, len) {
	return arr_match_ind_all(arr_out, arr, len, "function .*on_")
}
function get_handler_names(arr_out, arr_src, arr_ind, ind_len) {
	arr_gather(arr_out, arr_src, arr_ind, ind_len)
	arr_gsub(arr_out, ind_len, "function .*on_|\\(.*$", "")
	return ind_len
}
function generate_includes(    _i, _end, _arr, _len, _fname) {
	out_append_str("# <includes>")

	_end = INCLUDE_get_num()
	for(_i = 1; _i <= _end; ++_i) {

		_fname = INCLUDE_get_fname(_i)
		out_append_str(sprintf("# %s", _fname))

		_len = read_file(_fname, _arr)
		if (_len < 0) {
			equit(sprintf("reading '%s': %s", _fname, ERRNO),
				INCLUDE_get_line_no(_i))
		}

		out_append_arr(_arr, _len)
	}

	out_append_str("# </includes>")
}
# </generate>
